// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    Mux16(a=in,b[0..15]=false,sel=reset,out=zMuxOut);

    // 前回のregister情報を元にincrement演算
    Inc16(in=incIn,out=incOut);

    // registerへのloadフラグの計算。reset,load,incのどれか一つでも1となれば必ずregisterへの書き込みになる。
    Or8Way(in[0]=reset,in[1]=inc,in[2]=load,in[3..7]=false,out=actualLoad);

    // zMuxOutの結果を書き込むべきかをチェック
    Or8Way(in[0]=reset,in[1]=load,in[2..7]=false,out=zLoad);

    // zMuxOut or incOutのどちらの演算結果をregisterに格納するかをチェック
    // ※本来ならincフラグもチェックした方がわかりやすいかもしれないがその場合4wayでの演算になってしまうのでそれはそれで見辛い。。。
    // registerへ流し込むデータはzMuxOutをload(書き込み)すべきかどうかがわかれば、充分と考える。
    // (registerへの書き込みを行うかどうか自体はactualLoadで判定しているため)
    Mux16(a=incOut,b=zMuxOut,sel=zLoad,out=actualIn);

    Register(in=actualIn,load=actualLoad,out=out,out=incIn);

}
