// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //dest controll
    //instruction[5]=loadA instruction[4]=loadD instruction[3]=loadM
    Mux16(a=instruction,b=aluout,sel=instruction[15],out=aIn);

    // instruction[15] : instruction[5] : loadA
    //      0                  0            1
    //      0                  1            1
    //      1                  0            0
    //      1                  1            1
    Mux4Way16(a[0..15]=true,b[0..15]=true,c[0..15]=false,d[0..15]=true,sel[0]=instruction[5],sel[1]=instruction[15],out[15]=loadA);
    ARegister(in=aIn,load=loadA,out=outA,out[0..14]=addressM,out=pcIn);

    // instruction[15] : instruction[4] : loadD
    //      0                  0            0
    //      0                  1            0
    //      1                  0            0
    //      1                  1            1
    Mux4Way16(a[0..15]=false,b[0..15]=false,c[0..15]=false,d[0..15]=true,sel[0]=instruction[4],sel[1]=instruction[15],out[15]=loadD);
    DRegister(in=aluout,load=loadD,out=outD);
    Mux(a=false,b=instruction[3],sel=instruction[15],out=writeM);

    //pc controll
    //instruction[0,1,2] = j1(out < 0) : j2(out = 0) :j3(out > 0)
    Not(in=zr,out=nzr);
    Not(in=ng,out=nng);
    And(a=nzr,b=nng,out=pos);
    And16(a[0..2]=instruction[0..2],a[3..15]=false,b[0]=pos,b[1]=zr,b[2]=ng,b[3..15]=false,out[0..2]=tmppload);
    Or8Way(in[0..2]=tmppload,in[3..7]=false,out=loadP1);
    Mux(a=false,b=loadP1,sel=instruction[15],out=loadP);

    PC(in=pcIn,load=loadP,inc=true,reset=reset,out[0..14]=pc);

    //ALU input controll
    //in[12]
    Mux16(a=outA,b=inM,sel=instruction[12],out=aluiny);

    ALU(
      x=outD,
      y=aluiny,
      zx=instruction[11],
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
      f=instruction[7],
      no=instruction[6],
      out=outM,
      out=aluout,
      zr=zr,
      ng=ng
    );

}
